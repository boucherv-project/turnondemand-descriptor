tosca_definitions_version: cloudify_dsl_1_2

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.3/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3/plugin.yaml
  - https://raw.githubusercontent.com/boucherv/cloudify-docker-plugin/1.3-build/plugin.yaml
  - types/turnserver.yaml

inputs:
  image:
    description: >
      The OpenStack image ID

  flavor:
    description: >
      The OpenStack flavor

  agent_user:
    description: >
      User name used when SSH-ing into the started machine
    default: ubuntu

  turn_port_base_min:
    description: >
      Which port you want to map the turn port to.
    default: 3478

  turn_port_base_max:
    description: >
      Which port you want to map the turn port to.
    default: 3488

  turn_port_range_min:
    description: >
      Which port you want to map the turn port to.
    default: 49152

  turn_port_range_size:
    description: >
      Which port you want to map the turn port to.
    default: 10

  turn_port_range_max:
    description: >
      Which port you want to map the turn port to.
    default: 49252

  turn_container_base_port_bindings:
    description: >
      A dict of port bindings for the turn container.
    default:
      '3478/udp': 3478


node_types:
  turnserver.nodes.MonitoredDockerHost:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      cloudify_agent:
        default:
          user: { get_input: agent_user }
          home_dir: /home/ubuntu
      server:
        default:
          image: { get_input: image }
          flavor: { get_input: flavor }
          userdata: |
            #!/bin/bash
            sudo service ssh stop
            curl -o install.sh -sSL https://get.docker.com/
            sudo sh install.sh
            sudo groupadd docker
            sudo gpasswd -a ubuntu docker
            sudo gpasswd -a cloud docker
            sudo service docker restart
            sudo service ssh start
    interfaces:
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

node_templates:

  turn_floatingip:
    type: cloudify.openstack.nodes.FloatingIP

  turn_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: turnondemand-sg_turn
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port_range_min: { get_input: turn_port_base_min }
          port_range_max: { get_input: turn_port_base_max }
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          port_range_min: { get_input: turn_port_base_min }
          port_range_max: { get_input: turn_port_base_max }
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port_range_min: { get_input: turn_port_range_min }
          port_range_max: { get_input: turn_port_range_max }
          protocol: udp

  turn_vm:
    type: turnserver.nodes.MonitoredDockerHost
    properties:
      cloudify_agent:
        user: { get_input: agent_user }
        home_dir: /home/ubuntu
    relationships:
      - target: turn_security_group
        type: cloudify.openstack.server_connected_to_security_group
      - target: turn_floatingip
        type: cloudify.openstack.server_connected_to_floating_ip

  turn_container:
    type: turn.nodes.CoTurnContainer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            params:
              ports:
                - { get_input: turn_port_base_min }
              stdin_open: true
              tty: true
              command: /sbin/my_init
              environment:
                TEST: test
            other_params:
              ports_range:
                - min: { get_input: turn_port_range_min }
                  size: { get_input: turn_port_range_size }
                  protocol: udp
        start:
          inputs:
            params:
              port_bindings: { get_input: turn_container_base_port_bindings }
            other_params:
              ports_range:
                - min: { get_input: turn_port_range_min }
                  size: { get_input: turn_port_range_size }
                  protocol: udp

    relationships:
      - type: cloudify.relationships.contained_in
        target: turn_vm

outputs:
  endpoint:
    description: turn server endpoint
    value:
      ip_address: { get_attribute: [ turn_floatingip, floating_ip_address ] }
